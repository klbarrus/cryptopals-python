#!/usr/bin/env python3
# cryptopals set 1 challenge 7

import binascii


# from FIPS 197, example key in A.1, example input Appendix B
aes_input_text =  '32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34'
cipher_key_text = '2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c'

# remove spaces that were added for readability
aes_input_text = aes_input_text.replace(' ', '')
cipher_key_text = cipher_key_text.replace(' ', '')

# parameters for AES 128: key length in words, block size, number of rounds (Figure 4)
Nk = 4
Nb = 4
Nr = 10

# S-box (Figure 7)
S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
     0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
     0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
     0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
     0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
     0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
     0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
     0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
     0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
     0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
     0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
     0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
     0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
     0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
     0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
     0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

Rcon = [0x00, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000,
        0x80000000, 0x1b000000, 0x36000000]


def word_to_bytes(word_in):
    a0 = (word_in >> 24) & 0xff
    a1 = (word_in >> 16) & 0xff
    a2 = (word_in >>  8) & 0xff
    a3 = (word_in      ) & 0xff
    return a0, a1, a2, a3


def SubWord(word_in):
    a0, a1, a2, a3 = word_to_bytes(word_in)
    rv = S[a0] << 24 | S[a1] << 16 | S[a2] << 8 | S[a3]
#    print('  after subword {}'.format(hex(rv)))
    return rv


def RotWord(word_in):
    a0, a1, a2, a3 = word_to_bytes(word_in)
    rv = a1 << 24 | a2 << 16 | a3 << 8 | a0
#    print('  after rotword {}'.format(hex(rv)))
    return rv


def SubBytes(state_in):
    for i in range(0, Nb):
        state_in[i] = SubWord(state_in[i])


def ShiftRows(state_in):
    s00, s10, s20, s30 = word_to_bytes(state_in[0])
    s01, s11, s21, s31 = word_to_bytes(state_in[1])
    s02, s12, s22, s32 = word_to_bytes(state_in[2])
    s03, s13, s23, s33 = word_to_bytes(state_in[3])
    state_in[0] = s00 << 24 | s11 << 16 | s22 << 8 | s33
    state_in[1] = s01 << 24 | s12 << 16 | s23 << 8 | s30
    state_in[2] = s02 << 24 | s13 << 16 | s20 << 8 | s31
    state_in[3] = s03 << 24 | s10 << 16 | s21 << 8 | s32


# taken from wikipedia article "Rijndael_MixColumns"
def MixColumns(state_in):
    a = [0, 0, 0, 0]
    b = [0, 0, 0, 0]
    for i in range(0, Nb):
        a[0], a[1], a[2], a[3] = word_to_bytes(state_in[i])
        for j in range(0, 4):
            h = 0x00
            if a[j] & 0x80 != 0x00:
                h = 0xff
            b[j] = (a[j] << 1) & 0xff
            b[j] = b[j] ^ (0x1b & h)
        r0 = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]
        r1 = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]
        r2 = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]
        r3 = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]
        state_in[i] = r0 << 24 | r1 << 16 | r2 << 8 | r3


def PrintState(state_in):
    for i in range(0, Nb):
        print('{}'.format(hex(state_in[i])))


# w = [[0] for i in range(0, (Nr + 1) * Nk)]
w = []
key = binascii.a2b_hex(cipher_key_text)

# key expansion (Figure 11)
i = 0
while i < Nk:
    bytes_w = key[(i*Nk):(i+1)*Nk]
    w.append(int.from_bytes(bytes_w, 'big'))
    print('{} - {}'.format(i, hex(w[i])))
    i = i + 1
i = Nk
while i < (Nb * (Nr + 1)):
    temp = w[i-1]
    if i % Nk == 0:
        temp = SubWord(RotWord(temp)) ^ (Rcon[i//Nk])
#        print('  after rcon {}'.format(hex(temp)))
    elif Nk > 6 and (i % Nk) == 4:
        temp = SubWord(temp)
    w.append(w[i-Nk] ^ temp)
#    print('{} - {}'.format(i, hex(w[i])))
    i = i + 1

# encrypt (Figure 5)
state = [0, 0, 0, 0]
aes_input = binascii.a2b_hex(aes_input_text)
key_counter = 0

# state = in
for i in range(0, Nb):
    state[i] = int.from_bytes(aes_input[(i*Nb):(i+1)*Nb], 'big')

# AddRoundKey
for i in range(0, Nb):
    state[i] = state[i] ^ w[key_counter]
    key_counter += 1

for aes_round in range(1, Nr):
    SubBytes(state)
    ShiftRows(state)
    MixColumns(state)
    for i in range(0, Nb):
        state[i] = state[i] ^ w[key_counter]
        key_counter += 1
    print('end of round {}'.format(aes_round))
    PrintState(state)
    print('')

SubBytes(state)
ShiftRows(state)
for i in range(0, Nb):
    state[i] = state[i] ^ w[key_counter]
    key_counter += 1

PrintState(state)
